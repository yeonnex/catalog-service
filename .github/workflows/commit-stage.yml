name: Commit Stage # 워크플로의 이름
on: push # 새 코드를 저장소로 푸시하면 워크플로를 시작한다
jobs:
  build:
    name: Build and Test # 작업의 인간 친화적 명칭
    runs-on: ubuntu-22.04 # 작업이 실행될 머신의 유형
    permissions:
      contents: read # 현재 깃 저장소를 체크아웃할 수 있는 권한 부여
      security-events: write # 깃헙에 보안 이벤트를 제출할 수 있는 권한 부여
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      - name: Set up JDK
        uses: actions/setup-java@v3 # 자바 런타임을 설치하고 설정한다
        with: # 사용할 버전, 배포, 캐시 유형을 정의한다
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v3 # 그라이프를 사용해 취약성을 스캔한다
        id: scan # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고할 수 있다
        with:
          path: "${{ github.workspace }}" # 체크아웃 저장소 패스
          fail-build: false # 보안 취약성 발견시 빌드 실패 여부
          security-cutoff: high # 오류로 간주할 최소 수준의 보안 유형 (낮음, 중간, 높음, 치명적)
          acs-report-enable: true # 스캔이 완료된 잉후에 리포트를 생성할지 여부
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v2 # 깃헙으로 보안 취약성 리포트(SARIF 형식)전송
        if: success() || failure() # 이전 단계가 실패하더라도 리포트 전송
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }} # 이전 단계 결과의 리포트를 가져온다
      - name: Build, unit tests and integration tests
        # chmod +x gradlew : 윈도우 호환성을 해결하면서 그래들 래퍼 스크립트를 실행 가능하게 만들고,
        # ./gradlew build : 코드베이스를 컴파일하고 단위 및 통합 테스트를 실행하느 그래들 빌드 작업을 수행한다.
        run: |
          chmod +x gradlew
          ./gradlew build